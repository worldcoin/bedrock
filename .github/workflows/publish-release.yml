name: Publish Release

on:
  pull_request:
    # FIXME
    # types: [closed]
    # branches:
    #   - main

jobs:
  pre-release-checks:
    # FIXME
    # if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'release')
    runs-on: ubuntu-latest
    permissions:
        contents: read

    outputs:
      new_version: ${{ steps.version.outputs.new_version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get new version
        id: version
        run: |
          NEW_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members[0]' | cut -d '#' -f2)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Check latest published version
        id: latest_version
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r .tag_name | sed 's/^v//')

          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Ensure the new version is greater than the latest published version
          if ! { [ "$(printf '%s\n' "$LATEST_RELEASE" "$NEW_VERSION" | sort -V | tail -n1)" = "$NEW_VERSION" ] && \
                 [ "$NEW_VERSION" != "$LATEST_RELEASE" ]; }; then
            echo "Error: New version ($NEW_VERSION) is not greater than latest release ($LATEST_RELEASE)"
            exit 1
          fi

  publish-swift:
    name: Publish Swift
    runs-on: macos-latest
    needs: [pre-release-checks]
    permissions:
      contents: read
    outputs:
      release_id: ${{ steps.release.outputs.id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout swift mirror repo
        uses: actions/checkout@v4
        with:
          repository: worldcoin/bedrock-swift
          path: target-repo

      - name: Setup Swift
        uses: swift-actions/setup-swift@v2

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: aarch64-apple-ios-sim,aarch64-apple-ios,x86_64-apple-ios

      - name: Build the Swift project
        run: ./swift/build_swift.sh

      - name: Compress XCFramework binaries
        run: |
          zip -r Bedrock.xcframework.zip swift/Bedrock.xcframework

      - name: Create draft release in bedrock-swift & upload binaries
        uses: softprops/action-gh-release@v2
        id: release
        with:
          repository: worldcoin/bedrock-swift
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          make_latest: false
          draft: true
          fail_on_unmatched_files: true
          files: Bedrock.xcframework.zip
          token: ${{ secrets.DEPLOY_BOT_TOKEN }}
          body: Please review https://github.com/worldcoin/bedrock/releases/tag/${{ needs.pre-release-checks.outputs.new_version }} for full release notes.

      - name: Get metadata
        id: meta
        run: |
          ASSET_URL="${{ fromJSON(steps.release.outputs.assets)[0].url }}.zip"
          echo "asset_url=${ASSET_URL}" >> $GITHUB_OUTPUT

          CHECKSUM=$(swift package compute-checksum Bedrock.xcframework.zip)
          echo "checksum=${CHECKSUM}" >> $GITHUB_OUTPUT

      - name: Commit swift build
        env:
          GITHUB_TOKEN: ${{ secrets.DEPLOY_BOT_TOKEN }}
          ASSET_URL: ${{ steps.meta.outputs.asset_url }}
          CHECKSUM: ${{ steps.meta.outputs.checksum }}
          NEW_VERSION: ${{ needs.pre-release-checks.outputs.new_version }}
        run: |

          # copy non-binary source files
          cp -r swift/Sources/ target-repo/Sources

          # prepare Package.swift
          brew install swiftlint
          ./swift/archive_swift.sh --asset-url "$ASSET_URL" --checksum "$CHECKSUM" --release-version "$NEW_VERSION"
          cp Package.swift target-repo/

          cd target-repo
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/worldcoin/bedrock-swift.git

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git add .
          git commit -m "Release $NEW_VERSION"

          # Tag the release
          git tag $NEW_VERSION
          git push
          git push origin $NEW_VERSION

  prepare-kotlin:
    name: Prepare Kotlin
    runs-on: ubuntu-22.04-32core
    needs: [pre-release-checks]
    permissions:
      contents: read

    # Each target is built separately to run in parallel. Running sequentially takes vastly more time.
    # The jobs prepare-kotlin and publish-kotlin replace the kotlin/build_kotlin.sh script.
    strategy:
      fail-fast: true
      matrix:
        settings:
          - target: aarch64-linux-android
          - target: armv7-linux-androideabi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Install Cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross --locked

      - name: Build for target
        run: |
          CROSS_NO_WARNINGS=0 cross build --target ${{ matrix.settings.target }} --release --locked

      - name: Upload artifact
        uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08 # v4.6.0
        with:
          name: android-${{ matrix.settings.target }}
          path: ./target/${{ matrix.settings.target }}/release/libbedrock.so
          if-no-files-found: error

  publish-kotlin:
    name: Publish Kotlin
    runs-on: ubuntu-latest
    needs: [pre-release-checks, prepare-kotlin]
    permissions:
        packages: write
        contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup Java
        uses: actions/setup-java@0ab4596768b603586c0de567f2430c30f5b0d2b0 # v3.13.0
        with:
          distribution: temurin
          java-version: 17

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: .

      - name: Move artifacts
        run: |
          mkdir -p kotlin/src/main/jniLibs && cd kotlin/src/main/jniLibs
          mkdir armeabi-v7a arm64-v8a
          mv /home/runner/work/bedrock/bedrock/android-armv7-linux-androideabi/libbedrock.so ./armeabi-v7a/libbedrock.so
          mv /home/runner/work/bedrock/bedrock/android-aarch64-linux-android/libbedrock.so ./arm64-v8a/libbedrock.so

      - name: Generate bindings
        working-directory: kotlin
        run: cargo run -p uniffi-bindgen generate ./src/main/jniLibs/arm64-v8a/libbedrock.so --library --language kotlin --no-format --out-dir src/main/java

      - name: Set up Gradle
        working-directory: kotlin
        run: |
          curl -s "https://get.sdkman.io" | bash
          sdk install gradle 8.7
          gradle wrapper --gradle-version 8.7

      - name: Publish
        working-directory: kotlin
        run: ./gradlew sdk:publish
        env:
          GITHUB_ACTOR: wc-cicd
          GITHUB_TOKEN: ${{ github.token }}

  create-github-release:
    needs: [pre-release-checks, publish-kotlin, publish-swift]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ needs.pre-release-checks.outputs.new_version }}
          tag_name: ${{ needs.pre-release-checks.outputs.new_version }}
          generate_release_notes: true
          make_latest: true

      - name: Update GitHub release in Swift repo
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_BOT_TOKEN }}
        run: |
          gh release edit ${{ needs.pre-release-checks.outputs.new_version }} \
            --repo worldcoin/bedrock-swift \
            --draft=false \
            --latest