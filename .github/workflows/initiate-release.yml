name: Initiate Release
description: "Initiates a release of the library by creating a PR that bumps the version."

on:
  pull_request:
  workflow_dispatch:
    inputs:
      bump_type:
        description: "Version bump type"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  initiate-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write # required to open the PR and generate release notes
      pull-requests: write
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Calculate new version
        id: version
        env:
          # BUMP_TYPE: ${{ github.event.inputs.bump_type }}
          BUMP_TYPE: patch
        run: |
          # Get current version from workspace package in Cargo.toml
          CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members[0]' | cut -d '#' -f2)

          # Ensure CURRENT_VERSION is in semantic versioning format
          if [[ ! "$CURRENT_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "CRITICAL ERROR: CURRENT_VERSION '$CURRENT_VERSION' is not in semantic versioning format (MAJOR.MINOR.PATCH)."
              exit 1
          fi

          cargo metadata --no-deps --format-version 1 | jq -r '.workspace_members'

          # Split version into components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Calculate new version based on bump type
          case "$BUMP_TYPE" in
            "major")
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            "minor")
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            "patch")
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "New version will be: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update version
        run: cargo set-version ${{ steps.version.outputs.new_version }}

      - name: Generate Release Notes
        id: release_notes
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPO: ${{ github.repository }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |
          # Get the latest release tag
          LATEST_TAG=$(gh release list -L 1 | cut -f 3)

          # Generate release notes between latest tag and current branch
          NOTES=$(gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPO}/releases/generate-notes" \
            -f tag_name="${NEW_VERSION}" \
            -f previous_tag_name="${LATEST_TAG}" \
            | jq -r .body)

          if [[ "$NOTES" == "null" || -z "${NOTES// }" ]]; then
            echo "Error: Failed to generate release notes"
            echo "NOTES value: '$NOTES'"
            exit 1
          fi

          echo "release_notes<<DELIM" >> "$GITHUB_OUTPUT"
          echo "$NOTES" >> "$GITHUB_OUTPUT"
          echo "DELIM" >> "$GITHUB_OUTPUT"

      - name: Get branch name
        id: branch_name
        env:
          CANDIDATE_BRANCH_NAME: release-${{ steps.version.outputs.new_version }}
        run: |
          BRANCH_NAME="$CANDIDATE_BRANCH_NAME"

          # If branch already exists, append random characters
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            RANDOM_SUFFIX=$(openssl rand -hex 4)
            BRANCH_NAME="${CANDIDATE_BRANCH_NAME}-${RANDOM_SUFFIX}"
          fi

          echo "branch_name=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: Commit and Open PR
        env:
          GITHUB_TOKEN: ${{ github.token }}
          RELEASE_NOTES: ${{ steps.release_notes.outputs.release_notes }}
          BRANCH_NAME: ${{ steps.branch_name.outputs.branch_name }}
          NEW_VERSION: ${{ steps.version.outputs.new_version }}
        run: |

          git checkout -b "$BRANCH_NAME"

          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add Cargo.toml
          git add Cargo.lock
          git commit -m "Bump version to $NEW_VERSION"
          git push origin "$BRANCH_NAME"

          echo "RELEASE_NOTES: $RELEASE_NOTES"

          gh pr create \
            --title "Oxide Release $NEW_VERSION" \
            --body "${RELEASE_NOTES}" \
            --base main \
            --label "release" \
            --head "$BRANCH_NAME"
