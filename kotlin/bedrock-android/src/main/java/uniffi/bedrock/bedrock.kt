// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.bedrock

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0

    @JvmField var len: Long = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        RustBuffer(),
        Structure.ByValue

    class ByReference :
        RustBuffer(),
        Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) =
            uniffiRustCall { status ->
                // Note: need to convert the size to a `Long` value to make this work with JVM.
                UniffiLib.INSTANCE.ffi_bedrock_rustbuffer_alloc(size.toLong(), status)
            }.also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }

        internal fun create(
            capacity: ULong,
            len: ULong,
            data: Pointer?,
        ): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) =
            uniffiRustCall { status ->
                UniffiLib.INSTANCE.ffi_bedrock_rustbuffer_free(buf, status)
            }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 *
 * @suppress
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue :
        ForeignBytes(),
        Structure.ByValue
}

/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(
        value: KotlinType,
        buf: ByteBuffer,
    )

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf =
                rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                    it.order(ByteOrder.BIG_ENDIAN)
                }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)

    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue :
        UniffiRustCallStatus(),
        Structure.ByValue

    fun isSuccess(): Boolean = code == UNIFFI_CALL_SUCCESS

    fun isError(): Boolean = code == UNIFFI_CALL_ERROR

    fun isPanic(): Boolean = code == UNIFFI_CALL_UNEXPECTED_ERROR

    companion object {
        fun create(
            code: Byte,
            errorBuf: RustBuffer.ByValue,
        ): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(
    message: String,
) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : kotlin.Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : kotlin.Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U =
    uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter =
        java.util.concurrent.atomic
            .AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T = map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T = map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "bedrock"
}

private inline fun <reified Lib : Library> loadIndirect(componentName: String): Lib =
    Native.load<Lib>(findLibraryName(componentName), Lib::class.java)

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(
        `data`: Long,
        `pollResult`: Byte,
    )
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructPointer.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructVoid.UniffiByValue,
    )
}

internal interface UniffiCallbackInterfaceLoggerMethod0 : com.sun.jna.Callback {
    fun callback(
        `uniffiHandle`: Long,
        `level`: RustBuffer.ByValue,
        `message`: RustBuffer.ByValue,
        `uniffiOutReturn`: Pointer,
        uniffiCallStatus: UniffiRustCallStatus,
    )
}

@Structure.FieldOrder("log", "uniffiFree")
internal open class UniffiVTableCallbackInterfaceLogger(
    @JvmField internal var `log`: UniffiCallbackInterfaceLoggerMethod0? = null,
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
) : Structure() {
    class UniffiByValue(
        `log`: UniffiCallbackInterfaceLoggerMethod0? = null,
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    ) : UniffiVTableCallbackInterfaceLogger(`log`, `uniffiFree`),
        Structure.ByValue

    internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceLogger) {
        `log` = other.`log`
        `uniffiFree` = other.`uniffiFree`
    }
}

// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is
// rather `InterfaceTooLargeException`, caused by too many methods
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib
// * IntegrityCheckingUniffiLib (this)
// we allow for ~2x as many methods in the UniffiLib interface.
//
// The `ffi_uniffi_contract_version` method and all checksum methods are put
// into `IntegrityCheckingUniffiLib` and these methods are called only once,
// when the library is loaded.
internal interface IntegrityCheckingUniffiLib : Library {
    // Integrity check functions only
    fun uniffi_bedrock_checksum_func_get_config(): Short

    fun uniffi_bedrock_checksum_func_is_initialized(): Short

    fun uniffi_bedrock_checksum_func_set_config(): Short

    fun uniffi_bedrock_checksum_func_set_logger(): Short

    fun uniffi_bedrock_checksum_method_bedrockconfig_environment(): Short

    fun uniffi_bedrock_checksum_method_hexencodeddata_to_hex_string(): Short

    fun uniffi_bedrock_checksum_method_logger_log(): Short

    fun uniffi_bedrock_checksum_method_safesmartaccount_personal_sign(): Short

    fun uniffi_bedrock_checksum_method_safesmartaccount_sign_4337_op(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_demo_authenticate(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_demo_generic_operation(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_demo_mixed_operation(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_get_demo_result(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_log_message(): Short

    fun uniffi_bedrock_checksum_method_toolingdemo_test_log_levels(): Short

    fun uniffi_bedrock_checksum_constructor_bedrockconfig_new(): Short

    fun uniffi_bedrock_checksum_constructor_hexencodeddata_new(): Short

    fun uniffi_bedrock_checksum_constructor_safesmartaccount_new(): Short

    fun uniffi_bedrock_checksum_constructor_toolingdemo_new(): Short

    fun ffi_bedrock_uniffi_contract_version(): Int
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.
internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            val componentName = "bedrock"
            // For large crates we prevent `MethodTooLargeException` (see #2340)
            // N.B. the name of the extension is very misleading, since it is
            // rather `InterfaceTooLargeException`, caused by too many methods
            // in the interface for large crates.
            //
            // By splitting the otherwise huge interface into two parts
            // * UniffiLib (this)
            // * IntegrityCheckingUniffiLib
            // And all checksum methods are put into `IntegrityCheckingUniffiLib`
            // we allow for ~2x as many methods in the UniffiLib interface.
            //
            // Thus we first load the library with `loadIndirect` as `IntegrityCheckingUniffiLib`
            // so that we can (optionally!) call `uniffiCheckApiChecksums`...
            loadIndirect<IntegrityCheckingUniffiLib>(componentName)
                .also { lib: IntegrityCheckingUniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
            // ... and then we load the library as `UniffiLib`
            // N.B. we cannot use `loadIndirect` once and then try to cast it to `UniffiLib`
            // => results in `java.lang.ClassCastException: com.sun.proxy.$Proxy cannot be cast to ...`
            // error. So we must call `loadIndirect` twice. For crates large enough
            // to trigger this issue, the performance impact is negligible, running on
            // a macOS M1 machine the `loadIndirect` call takes ~50ms.
            val lib = loadIndirect<UniffiLib>(componentName)
            // No need to check the contract version and checksums, since
            // we already did that with `IntegrityCheckingUniffiLib` above.
            uniffiCallbackInterfaceLogger.register(lib)
            // Loading of library with integrity check done.
            lib
        }

        // The Cleaner for the whole library
        internal val CLEANER: UniffiCleaner by lazy {
            UniffiCleaner.create()
        }
    }

    // FFI functions
    fun uniffi_bedrock_fn_clone_bedrockconfig(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_free_bedrockconfig(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_constructor_bedrockconfig_new(
        `environment`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_method_bedrockconfig_environment(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_clone_hexencodeddata(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_free_hexencodeddata(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_constructor_hexencodeddata_new(
        `s`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_method_hexencodeddata_to_hex_string(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_clone_logger(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_free_logger(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_init_callback_vtable_logger(`vtable`: UniffiVTableCallbackInterfaceLogger): Unit

    fun uniffi_bedrock_fn_method_logger_log(
        `ptr`: Pointer,
        `level`: RustBuffer.ByValue,
        `message`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_clone_safesmartaccount(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_free_safesmartaccount(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_constructor_safesmartaccount_new(
        `privateKey`: RustBuffer.ByValue,
        `walletAddress`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_method_safesmartaccount_personal_sign(
        `ptr`: Pointer,
        `chainId`: Int,
        `message`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_method_safesmartaccount_sign_4337_op(
        `ptr`: Pointer,
        `userOperation`: RustBuffer.ByValue,
        `chainId`: Int,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_clone_toolingdemo(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun uniffi_bedrock_fn_free_toolingdemo(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_constructor_toolingdemo_new(uniffi_out_err: UniffiRustCallStatus): Pointer

    fun uniffi_bedrock_fn_method_toolingdemo_demo_authenticate(
        `ptr`: Pointer,
        `username`: RustBuffer.ByValue,
        `password`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_method_toolingdemo_demo_generic_operation(
        `ptr`: Pointer,
        `input`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_method_toolingdemo_demo_mixed_operation(
        `ptr`: Pointer,
        `operation`: RustBuffer.ByValue,
        `data`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_method_toolingdemo_get_demo_result(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_bedrock_fn_method_toolingdemo_log_message(
        `ptr`: Pointer,
        `message`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_method_toolingdemo_test_log_levels(
        `ptr`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_func_get_config(uniffi_out_err: UniffiRustCallStatus): RustBuffer.ByValue

    fun uniffi_bedrock_fn_func_is_initialized(uniffi_out_err: UniffiRustCallStatus): Byte

    fun uniffi_bedrock_fn_func_set_config(
        `environment`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_bedrock_fn_func_set_logger(
        `logger`: Pointer,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_bedrock_rustbuffer_alloc(
        `size`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_bedrock_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_bedrock_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_bedrock_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_bedrock_rust_future_poll_u8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_u8(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_u8(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_u8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_bedrock_rust_future_poll_i8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_i8(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_i8(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_i8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_bedrock_rust_future_poll_u16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_u16(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_u16(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_u16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_bedrock_rust_future_poll_i16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_i16(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_i16(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_i16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_bedrock_rust_future_poll_u32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_u32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_u32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_u32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_bedrock_rust_future_poll_i32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_i32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_i32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_i32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_bedrock_rust_future_poll_u64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_u64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_u64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_u64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_bedrock_rust_future_poll_i64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_i64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_i64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_i64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_bedrock_rust_future_poll_f32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_f32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_f32(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_f32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_bedrock_rust_future_poll_f64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_f64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_f64(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_f64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_bedrock_rust_future_poll_pointer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_pointer(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_pointer(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_pointer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_bedrock_rust_future_poll_rust_buffer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_rust_buffer(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_rust_buffer(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_rust_buffer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_bedrock_rust_future_poll_void(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_bedrock_rust_future_cancel_void(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_free_void(`handle`: Long): Unit

    fun ffi_bedrock_rust_future_complete_void(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit
}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 29
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_bedrock_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_bedrock_checksum_func_get_config() != 37061.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_func_is_initialized() != 58806.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_func_set_config() != 25999.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_func_set_logger() != 47849.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_bedrockconfig_environment() != 53973.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_hexencodeddata_to_hex_string() != 53475.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_logger_log() != 30465.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_safesmartaccount_personal_sign() != 21352.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_safesmartaccount_sign_4337_op() != 18885.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_demo_authenticate() != 11263.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_demo_generic_operation() != 47303.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_demo_mixed_operation() != 58510.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_get_demo_result() != 19522.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_log_message() != 550.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_method_toolingdemo_test_log_levels() != 43380.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_constructor_bedrockconfig_new() != 62067.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_constructor_hexencodeddata_new() != 40879.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_constructor_safesmartaccount_new() != 38977.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_bedrock_checksum_constructor_toolingdemo_new() != 46711.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    UniffiLib.INSTANCE
}

// Async support

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/**
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoPointer // Magic number for the Rust proxy to call using the same mechanism as every other method,

// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface : Any> : FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface = handleMap.get(value)

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(
        value: CallbackInterface,
        buf: ByteBuffer,
    ) {
        buf.putLong(lower(value))
    }
}

/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner =
        com.sun.jna.internal.Cleaner
            .getCleaner()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner =
        java.lang.ref.Cleaner
            .create()

    override fun register(
        value: Any,
        cleanUpTask: Runnable,
    ): UniffiCleaner.Cleanable = JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterUInt : FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt = value.toUInt()

    override fun read(buf: ByteBuffer): UInt = lift(buf.getInt())

    override fun lower(value: UInt): Int = value.toInt()

    override fun allocationSize(value: UInt) = 4UL

    override fun write(
        value: UInt,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean = value.toInt() != 0

    override fun read(buf: ByteBuffer): Boolean = lift(buf.get())

    override fun lower(value: Boolean): Byte = if (value) 1.toByte() else 0.toByte()

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(
        value: Boolean,
        buf: ByteBuffer,
    ) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(
        value: String,
        buf: ByteBuffer,
    ) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * Global configuration for Bedrock
 */
public interface BedrockConfigInterface {
    /**
     * Gets the current environment
     */
    fun `environment`(): BedrockEnvironment

    companion object
}

/**
 * Global configuration for Bedrock
 */
open class BedrockConfig :
    Disposable,
    AutoCloseable,
    BedrockConfigInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * Creates a new BedrockConfig with the specified environment
     *
     * # Arguments
     * * `environment` - The environment to use for this configuration
     *
     * # Examples
     *
     * ## Swift
     *
     * ```swift
     * let config = BedrockConfig(environment: .production)
     * ```
     */
    constructor(`environment`: BedrockEnvironment) :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_constructor_bedrockconfig_new(
                    FfiConverterTypeBedrockEnvironment.lower(`environment`),
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_free_bedrockconfig(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_clone_bedrockconfig(pointer!!, status)
        }

    /**
     * Gets the current environment
     */
    override fun `environment`(): BedrockEnvironment =
        FfiConverterTypeBedrockEnvironment.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_bedrockconfig_environment(it, _status)
                }
            },
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeBedrockConfig : FfiConverter<BedrockConfig, Pointer> {
    override fun lower(value: BedrockConfig): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): BedrockConfig = BedrockConfig(value)

    override fun read(buf: ByteBuffer): BedrockConfig {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: BedrockConfig) = 8UL

    override fun write(
        value: BedrockConfig,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * A wrapper around hex-encoded bytes (may or may not be a number).
 *
 * This is used to ensure that the hex string is properly formatted and the output is always prefixed with "0x".
 * Ensures consistency in expected output format.
 *
 * # Examples
 * ```
 * use bedrock::primitives::HexEncodedData;
 * let hex_string = HexEncodedData::new("0x1234567890abcdef");
 * ```
 */
public interface HexEncodedDataInterface {
    /**
     * Returns the wrapped hex string as a String. Re-wraps `Display` trait for foreign code.
     */
    fun `toHexString`(): kotlin.String

    companion object
}

/**
 * A wrapper around hex-encoded bytes (may or may not be a number).
 *
 * This is used to ensure that the hex string is properly formatted and the output is always prefixed with "0x".
 * Ensures consistency in expected output format.
 *
 * # Examples
 * ```
 * use bedrock::primitives::HexEncodedData;
 * let hex_string = HexEncodedData::new("0x1234567890abcdef");
 * ```
 */
open class HexEncodedData :
    Disposable,
    AutoCloseable,
    HexEncodedDataInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * Initializes a new `HexEncodedData` from a hex string.
     *
     * # Arguments
     * * `s` - The hex string to initialize the `HexEncodedData` from. May or may not be prefixed with "0x".
     *
     * # Errors
     * - `PrimitiveError::InvalidHexString` if the provided string is not validly encoded hex data.
     */
    constructor(`s`: kotlin.String) :
        this(
            uniffiRustCallWithError(PrimitiveException) { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_constructor_hexencodeddata_new(FfiConverterString.lower(`s`), _status)
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_free_hexencodeddata(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_clone_hexencodeddata(pointer!!, status)
        }

    /**
     * Returns the wrapped hex string as a String. Re-wraps `Display` trait for foreign code.
     */
    override fun `toHexString`(): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_hexencodeddata_to_hex_string(it, _status)
                }
            },
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeHexEncodedData : FfiConverter<HexEncodedData, Pointer> {
    override fun lower(value: HexEncodedData): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): HexEncodedData = HexEncodedData(value)

    override fun read(buf: ByteBuffer): HexEncodedData {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: HexEncodedData) = 8UL

    override fun write(
        value: HexEncodedData,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * Trait representing a logger that can log messages at various levels.
 *
 * This trait should be implemented by any logger that wants to receive log messages.
 * It is exported via `UniFFI` for use in foreign languages.
 *
 * # Examples
 *
 * Implementing the `Logger` trait:
 *
 * ```rust
 *
 * use bedrock::primitives::logger::{Logger, LogLevel};
 *
 * struct MyLogger;
 *
 * impl Logger for MyLogger {
 * fn log(&self, level: LogLevel, message: String) {
 * println!("[{:?}] {}", level, message);
 * }
 * }
 * ```
 *
 * ## swift
 *
 * ```swift
 * class BedrockCoreLoggerBridge: Bedrock.Logger {
 * static let shared = BedrockCoreLoggerBridge()
 *
 * func log(level: Bedrock.LogLevel, message: String) {
 * Log.log(level.toCoreLevel(), message)
 * }
 * }
 *
 * public func setupBedrockLogger() {
 * Bedrock.setLogger(logger: BedrockCoreLoggerBridge.shared)
 * }
 *
 * extension Bedrock.LogLevel {
 * func toCoreLevel() -> WorldAppCore.LogLevel {
 * switch self {
 * case .debug, .trace:
 * return .debug
 * case .info:
 * return .info
 * case .error:
 * return .error
 * case .warn:
 * return .warn
 * }
 * }
 * }
 * ```
 *
 * ### In app delegate
 *
 * ```swift
 * setupBedrockLogger() // Call this only once!!!
 * ```
 */
public interface Logger {
    /**
     * Logs a message at the specified log level.
     *
     * # Arguments
     *
     * * `level` - The severity level of the log message.
     * * `message` - The log message to be recorded.
     */
    fun `log`(
        `level`: LogLevel,
        `message`: kotlin.String,
    )

    companion object
}

/**
 * Trait representing a logger that can log messages at various levels.
 *
 * This trait should be implemented by any logger that wants to receive log messages.
 * It is exported via `UniFFI` for use in foreign languages.
 *
 * # Examples
 *
 * Implementing the `Logger` trait:
 *
 * ```rust
 *
 * use bedrock::primitives::logger::{Logger, LogLevel};
 *
 * struct MyLogger;
 *
 * impl Logger for MyLogger {
 * fn log(&self, level: LogLevel, message: String) {
 * println!("[{:?}] {}", level, message);
 * }
 * }
 * ```
 *
 * ## swift
 *
 * ```swift
 * class BedrockCoreLoggerBridge: Bedrock.Logger {
 * static let shared = BedrockCoreLoggerBridge()
 *
 * func log(level: Bedrock.LogLevel, message: String) {
 * Log.log(level.toCoreLevel(), message)
 * }
 * }
 *
 * public func setupBedrockLogger() {
 * Bedrock.setLogger(logger: BedrockCoreLoggerBridge.shared)
 * }
 *
 * extension Bedrock.LogLevel {
 * func toCoreLevel() -> WorldAppCore.LogLevel {
 * switch self {
 * case .debug, .trace:
 * return .debug
 * case .info:
 * return .info
 * case .error:
 * return .error
 * case .warn:
 * return .warn
 * }
 * }
 * }
 * ```
 *
 * ### In app delegate
 *
 * ```swift
 * setupBedrockLogger() // Call this only once!!!
 * ```
 */
open class LoggerImpl :
    Disposable,
    AutoCloseable,
    Logger {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_free_logger(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_clone_logger(pointer!!, status)
        }

    /**
     * Logs a message at the specified log level.
     *
     * # Arguments
     *
     * * `level` - The severity level of the log message.
     * * `message` - The log message to be recorded.
     */
    override fun `log`(
        `level`: LogLevel,
        `message`: kotlin.String,
    ) = callWithPointer {
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_method_logger_log(
                it,
                FfiConverterTypeLogLevel.lower(`level`),
                FfiConverterString.lower(`message`),
                _status,
            )
        }
    }

    companion object
}

// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceLogger {
    internal object `log` : UniffiCallbackInterfaceLoggerMethod0 {
        override fun callback(
            `uniffiHandle`: Long,
            `level`: RustBuffer.ByValue,
            `message`: RustBuffer.ByValue,
            `uniffiOutReturn`: Pointer,
            uniffiCallStatus: UniffiRustCallStatus,
        ) {
            val uniffiObj = FfiConverterTypeLogger.handleMap.get(uniffiHandle)
            val makeCall = {  uniffiObj.`log`(
                FfiConverterTypeLogLevel.lift(`level`),
                FfiConverterString.lift(`message`),
            )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree : UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeLogger.handleMap.remove(handle)
        }
    }

    internal var vtable =
        UniffiVTableCallbackInterfaceLogger.UniffiByValue(
            `log`,
            uniffiFree,
        )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_bedrock_fn_init_callback_vtable_logger(vtable)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeLogger : FfiConverter<Logger, Pointer> {
    internal val handleMap = UniffiHandleMap<Logger>()

    override fun lower(value: Logger): Pointer = Pointer(handleMap.insert(value))

    override fun lift(value: Pointer): Logger = LoggerImpl(value)

    override fun read(buf: ByteBuffer): Logger {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Logger) = 8UL

    override fun write(
        value: Logger,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * A Safe Smart Account (previously Gnosis Safe) is the representation of a Safe smart contract.
 *
 * It is used to sign messages, transactions and typed data on behalf of the Safe smart contract.
 *
 * Reference: <https://github.com/safe-global/safe-smart-account>
 */
public interface SafeSmartAccountInterface {
    /**
     * Signs a string message using the `personal_sign` method on behalf of the Safe Smart Account.
     *
     * # Arguments
     * - `chain_id`: The chain ID of the chain where the message is being signed. While technically the chain ID is a `U256` in EVM, we limit
     * to sensible `u32` (which works well with foreign code).
     * - `message`: The message to sign. Do not add the EIP-191 prefix, or typehash prefixes. Should be the raw message.
     *
     * # Errors
     * - Will throw an error if the signature process unexpectedly fails.
     */
    fun `personalSign`(
        `chainId`: kotlin.UInt,
        `message`: kotlin.String,
    ): HexEncodedData

    /**
     * Crafts and signs a 4337 user operation.
     *
     * # Arguments
     * - `user_operation`: The user operation to sign.
     * - `chain_id`: The chain ID of the chain where the user operation is being signed.
     *
     * # Errors
     * - Will throw an error if the user operation is invalid, particularly if any attribute is not valid.
     * - Will throw an error if the signature process unexpectedly fails.
     *
     * # Examples
     * ```rust
     * use bedrock::smart_account::{UserOperation, SafeSmartAccount};
     *
     * let safe = SafeSmartAccount::new(
     * // this is Anvil's default private key, it is a test secret
     * "ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80".to_string(),
     * "0x4564420674EA68fcc61b463C0494807C759d47e6",
     * )
     * .unwrap();
     *
     * // This would normally be crafted by the user, or requested by Mini Apps.
     * let user_op = UserOperation {
     * sender:"0xf1390a26bd60d83a4e38c7be7be1003c616296ad".to_string(),
     * nonce: "0xb14292cd79fae7d79284d4e6304fb58e21d579c13a75eed80000000000000000".to_string(),
     * call_data:  "0x7bb3742800000000000000000000000079a02482a880bce3f13e09da970dc34db4cd24d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ce2111f9ab8909b71ebadc9b6458daefe069eda4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000".to_string(),
     * signature:  "0x000012cea6000000967a7600ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff".to_string(),
     * call_gas_limit: "0xabb8".to_string(),
     * verification_gas_limit: "0xfa07".to_string(),
     * pre_verification_gas: "0x8e4d78".to_string(),
     * max_fee_per_gas: "0x1af6f".to_string(),
     * max_priority_fee_per_gas: "0x1adb0".to_string(),
     * paymaster: Some("0xEF725Aa22d43Ea69FB22bE2EBe6ECa205a6BCf5B".to_string()),
     * paymaster_verification_gas_limit: "0x7415".to_string(),
     * paymaster_post_op_gas_limit: "0x".to_string(),
     * paymaster_data: Some("000000000000000067789a97c4af0f8ae7acc9237c8f9611a0eb4662009d366b8defdf5f68fed25d22ca77be64b8eef49d917c3f8642ca539571594a84be9d0ee717c099160b79a845bea2111b".to_string()),
     * factory: None,
     * factory_data: None,
     * };
     *
     * let signature = safe.sign_4337_op(&user_op, 480).unwrap();
     *
     * println!("Signature: {}", signature.to_hex_string());
     * ```
     */
    fun `sign4337Op`(
        `userOperation`: UserOperation,
        `chainId`: kotlin.UInt,
    ): HexEncodedData

    companion object
}

/**
 * A Safe Smart Account (previously Gnosis Safe) is the representation of a Safe smart contract.
 *
 * It is used to sign messages, transactions and typed data on behalf of the Safe smart contract.
 *
 * Reference: <https://github.com/safe-global/safe-smart-account>
 */
open class SafeSmartAccount :
    Disposable,
    AutoCloseable,
    SafeSmartAccountInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * Initializes a new `SafeSmartAccount` instance with the given EOA signing key.
     *
     * # Arguments
     * - `private_key`: A hex-encoded string representing the **secret key** of the EOA who is an owner in the Safe.
     * - `wallet_address`: The address of the Safe Smart Account (i.e. the deployed smart contract). This is required because
     * some legacy versions of the wallet were computed differently. Today, it cannot be deterministically computed for all
     * users. This is also necessary to support signing for Safes deployed by third-party Mini App devs, where the
     * wallet address is only known at runtime.
     *
     * # Errors
     * - Will return an error if the key is not a validly encoded hex string.
     * - Will return an error if the key is not a valid point in the k256 curve.
     */
    constructor(`privateKey`: kotlin.String, `walletAddress`: kotlin.String) :
        this(
            uniffiRustCallWithError(SafeSmartAccountException) { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_constructor_safesmartaccount_new(
                    FfiConverterString.lower(`privateKey`),
                    FfiConverterString.lower(`walletAddress`),
                    _status,
                )
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_free_safesmartaccount(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_clone_safesmartaccount(pointer!!, status)
        }

    /**
     * Signs a string message using the `personal_sign` method on behalf of the Safe Smart Account.
     *
     * # Arguments
     * - `chain_id`: The chain ID of the chain where the message is being signed. While technically the chain ID is a `U256` in EVM, we limit
     * to sensible `u32` (which works well with foreign code).
     * - `message`: The message to sign. Do not add the EIP-191 prefix, or typehash prefixes. Should be the raw message.
     *
     * # Errors
     * - Will throw an error if the signature process unexpectedly fails.
     */
    @Throws(SafeSmartAccountException::class)
    override fun `personalSign`(
        `chainId`: kotlin.UInt,
        `message`: kotlin.String,
    ): HexEncodedData =
        FfiConverterTypeHexEncodedData.lift(
            callWithPointer {
                uniffiRustCallWithError(SafeSmartAccountException) { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_safesmartaccount_personal_sign(
                        it,
                        FfiConverterUInt.lower(`chainId`),
                        FfiConverterString.lower(`message`),
                        _status,
                    )
                }
            },
        )

    /**
     * Crafts and signs a 4337 user operation.
     *
     * # Arguments
     * - `user_operation`: The user operation to sign.
     * - `chain_id`: The chain ID of the chain where the user operation is being signed.
     *
     * # Errors
     * - Will throw an error if the user operation is invalid, particularly if any attribute is not valid.
     * - Will throw an error if the signature process unexpectedly fails.
     *
     * # Examples
     * ```rust
     * use bedrock::smart_account::{UserOperation, SafeSmartAccount};
     *
     * let safe = SafeSmartAccount::new(
     * // this is Anvil's default private key, it is a test secret
     * "ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80".to_string(),
     * "0x4564420674EA68fcc61b463C0494807C759d47e6",
     * )
     * .unwrap();
     *
     * // This would normally be crafted by the user, or requested by Mini Apps.
     * let user_op = UserOperation {
     * sender:"0xf1390a26bd60d83a4e38c7be7be1003c616296ad".to_string(),
     * nonce: "0xb14292cd79fae7d79284d4e6304fb58e21d579c13a75eed80000000000000000".to_string(),
     * call_data:  "0x7bb3742800000000000000000000000079a02482a880bce3f13e09da970dc34db4cd24d10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044a9059cbb000000000000000000000000ce2111f9ab8909b71ebadc9b6458daefe069eda4000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000".to_string(),
     * signature:  "0x000012cea6000000967a7600ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff".to_string(),
     * call_gas_limit: "0xabb8".to_string(),
     * verification_gas_limit: "0xfa07".to_string(),
     * pre_verification_gas: "0x8e4d78".to_string(),
     * max_fee_per_gas: "0x1af6f".to_string(),
     * max_priority_fee_per_gas: "0x1adb0".to_string(),
     * paymaster: Some("0xEF725Aa22d43Ea69FB22bE2EBe6ECa205a6BCf5B".to_string()),
     * paymaster_verification_gas_limit: "0x7415".to_string(),
     * paymaster_post_op_gas_limit: "0x".to_string(),
     * paymaster_data: Some("000000000000000067789a97c4af0f8ae7acc9237c8f9611a0eb4662009d366b8defdf5f68fed25d22ca77be64b8eef49d917c3f8642ca539571594a84be9d0ee717c099160b79a845bea2111b".to_string()),
     * factory: None,
     * factory_data: None,
     * };
     *
     * let signature = safe.sign_4337_op(&user_op, 480).unwrap();
     *
     * println!("Signature: {}", signature.to_hex_string());
     * ```
     */
    @Throws(SafeSmartAccountException::class)
    override fun `sign4337Op`(
        `userOperation`: UserOperation,
        `chainId`: kotlin.UInt,
    ): HexEncodedData =
        FfiConverterTypeHexEncodedData.lift(
            callWithPointer {
                uniffiRustCallWithError(SafeSmartAccountException) { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_safesmartaccount_sign_4337_op(
                        it,
                        FfiConverterTypeUserOperation.lower(`userOperation`),
                        FfiConverterUInt.lower(`chainId`),
                        _status,
                    )
                }
            },
        )

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSafeSmartAccount : FfiConverter<SafeSmartAccount, Pointer> {
    override fun lower(value: SafeSmartAccount): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): SafeSmartAccount = SafeSmartAccount(value)

    override fun read(buf: ByteBuffer): SafeSmartAccount {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: SafeSmartAccount) = 8UL

    override fun write(
        value: SafeSmartAccount,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

// This template implements a class for working with a Rust struct via a Pointer/Arc<T>
// to the live Rust struct on the other side of the FFI.
//
// Each instance implements core operations for working with the Rust `Arc<T>` and the
// Kotlin Pointer to work with the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//

/**
 * A simple demo struct to test tooling functionality like log prefixing and error handling.
 */
public interface ToolingDemoInterface {
    /**
     * Demo: Strongly typed errors for known, structured error cases
     *
     * # Errors
     *
     * Returns `DemoError::InvalidInput` if username is empty.
     * Returns `DemoError::AuthenticationFailed` if credentials are invalid.
     * Returns `DemoError::NetworkTimeout` if user is "slowuser".
     * Returns `DemoError::Generic` if the generic operation fails.
     */
    fun `demoAuthenticate`(
        `username`: kotlin.String,
        `password`: kotlin.String,
    ): kotlin.String

    /**
     * Demo: Generic errors for complex operations with anyhow error chains
     *
     * # Errors
     *
     * Returns `DemoError::Generic` for various error conditions including
     * empty input, network errors, parse errors, and deep chain errors.
     */
    fun `demoGenericOperation`(`input`: kotlin.String): kotlin.String

    /**
     * Demo: Mixed usage - structured errors for validation, generic for complex operations
     *
     * # Errors
     *
     * Returns `DemoError::InvalidInput` if operation is empty or unknown.
     * Returns `DemoError::Generic` if the processing operation fails.
     */
    fun `demoMixedOperation`(
        `operation`: kotlin.String,
        `data`: kotlin.String,
    ): kotlin.String

    /**
     * Returns a simple result for testing.
     */
    fun `getDemoResult`(): kotlin.String

    /**
     * Logs a simple message to test log prefixing.
     */
    fun `logMessage`(`message`: kotlin.String)

    /**
     * Logs messages at different levels to test log prefixing.
     */
    fun `testLogLevels`()

    companion object
}

/**
 * A simple demo struct to test tooling functionality like log prefixing and error handling.
 */
open class ToolingDemo :
    Disposable,
    AutoCloseable,
    ToolingDemoInterface {
    constructor(pointer: Pointer) {
        this.pointer = pointer
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noPointer: NoPointer) {
        this.pointer = null
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(pointer))
    }

    /**
     * Creates a new tooling demo instance.
     */
    constructor() :
        this(
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_constructor_toolingdemo_new(_status)
            },
        )

    protected val pointer: Pointer?
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (!this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.uniffiClonePointer())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(
        private val pointer: Pointer?,
    ) : Runnable {
        override fun run() {
            pointer?.let { ptr ->
                uniffiRustCall { status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_free_toolingdemo(ptr, status)
                }
            }
        }
    }

    fun uniffiClonePointer(): Pointer =
        uniffiRustCall { status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_clone_toolingdemo(pointer!!, status)
        }

    /**
     * Demo: Strongly typed errors for known, structured error cases
     *
     * # Errors
     *
     * Returns `DemoError::InvalidInput` if username is empty.
     * Returns `DemoError::AuthenticationFailed` if credentials are invalid.
     * Returns `DemoError::NetworkTimeout` if user is "slowuser".
     * Returns `DemoError::Generic` if the generic operation fails.
     */
    @Throws(DemoException::class)
    override fun `demoAuthenticate`(
        `username`: kotlin.String,
        `password`: kotlin.String,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(DemoException) { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_demo_authenticate(
                        it,
                        FfiConverterString.lower(`username`),
                        FfiConverterString.lower(`password`),
                        _status,
                    )
                }
            },
        )

    /**
     * Demo: Generic errors for complex operations with anyhow error chains
     *
     * # Errors
     *
     * Returns `DemoError::Generic` for various error conditions including
     * empty input, network errors, parse errors, and deep chain errors.
     */
    @Throws(DemoException::class)
    override fun `demoGenericOperation`(`input`: kotlin.String): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(DemoException) { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_demo_generic_operation(
                        it,
                        FfiConverterString.lower(`input`),
                        _status,
                    )
                }
            },
        )

    /**
     * Demo: Mixed usage - structured errors for validation, generic for complex operations
     *
     * # Errors
     *
     * Returns `DemoError::InvalidInput` if operation is empty or unknown.
     * Returns `DemoError::Generic` if the processing operation fails.
     */
    @Throws(DemoException::class)
    override fun `demoMixedOperation`(
        `operation`: kotlin.String,
        `data`: kotlin.String,
    ): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCallWithError(DemoException) { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_demo_mixed_operation(
                        it,
                        FfiConverterString.lower(`operation`),
                        FfiConverterString.lower(`data`),
                        _status,
                    )
                }
            },
        )

    /**
     * Returns a simple result for testing.
     */
    override fun `getDemoResult`(): kotlin.String =
        FfiConverterString.lift(
            callWithPointer {
                uniffiRustCall { _status ->
                    UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_get_demo_result(it, _status)
                }
            },
        )

    /**
     * Logs a simple message to test log prefixing.
     */
    override fun `logMessage`(`message`: kotlin.String) =
        callWithPointer {
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_log_message(it, FfiConverterString.lower(`message`), _status)
            }
        }

    /**
     * Logs messages at different levels to test log prefixing.
     */
    override fun `testLogLevels`() =
        callWithPointer {
            uniffiRustCall { _status ->
                UniffiLib.INSTANCE.uniffi_bedrock_fn_method_toolingdemo_test_log_levels(it, _status)
            }
        }

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeToolingDemo : FfiConverter<ToolingDemo, Pointer> {
    override fun lower(value: ToolingDemo): Pointer = value.uniffiClonePointer()

    override fun lift(value: Pointer): ToolingDemo = ToolingDemo(value)

    override fun read(buf: ByteBuffer): ToolingDemo {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: ToolingDemo) = 8UL

    override fun write(
        value: ToolingDemo,
        buf: ByteBuffer,
    ) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}

/**
 * A pseudo-transaction object for EIP-4337. Used to execute transactions through the Safe Smart Account.
 *
 * This object is expected to be initialized from foreign languages.
 *
 * Reference: <https://www.erc4337.io/docs/understanding-ERC-4337/user-operation>
 *
 * Note the types of this struct are types that can be lifted from foreign languages to be then parsed and validated.
 */
data class UserOperation(
    /**
     * The address of the smart contract account (Solidity type: `address`)
     */
    var `sender`: kotlin.String,
    /**
     * Anti-replay protection; also used as the salt for first-time account creation (Solidity type: `uint256`)
     */
    var `nonce`: kotlin.String,
    /**
     * Data that's passed to the sender for execution (Solidity type: `bytes`)
     */
    var `callData`: kotlin.String,
    /**
     * Gas limit for execution phase (Solidity type: `uint128`)
     */
    var `callGasLimit`: kotlin.String,
    /**
     * Gas limit for verification phase (Solidity type: `uint128`)
     */
    var `verificationGasLimit`: kotlin.String,
    /**
     * Gas to compensate the bundler (Solidity type: `uint256`)
     */
    var `preVerificationGas`: kotlin.String,
    /**
     * Maximum fee per gas (similar to [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)'s `max_fee_per_gas`) (Solidity type: `uint256`)
     */
    var `maxFeePerGas`: kotlin.String,
    /**
     * Maximum priority fee per gas (Solidity type: `uint128`)
     */
    var `maxPriorityFeePerGas`: kotlin.String,
    /**
     * Paymaster contact address (Solidity type: `address`)
     */
    var `paymaster`: kotlin.String?,
    /**
     * Paymaster verification gas limit (Solidity type: `uint128`)
     */
    var `paymasterVerificationGasLimit`: kotlin.String,
    /**
     * Paymaster post-operation gas limit (Solidity type: `uint128`)
     */
    var `paymasterPostOpGasLimit`: kotlin.String,
    /**
     * Paymaster additional data for verification (Solidity type: `bytes`)
     */
    var `paymasterData`: kotlin.String?,
    /**
     * Used to validate a `UserOperation` along with the nonce during verification (Solidity type: `bytes`)
     */
    var `signature`: kotlin.String,
    /**
     * Factory address (Solidity type: `address`)
     */
    var `factory`: kotlin.String?,
    /**
     * Factory data (Solidity type: `bytes`)
     */
    var `factoryData`: kotlin.String?,
) {
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeUserOperation : FfiConverterRustBuffer<UserOperation> {
    override fun read(buf: ByteBuffer): UserOperation =
        UserOperation(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
        )

    override fun allocationSize(value: UserOperation) =
        (
            FfiConverterString.allocationSize(value.`sender`) +
                FfiConverterString.allocationSize(value.`nonce`) +
                FfiConverterString.allocationSize(value.`callData`) +
                FfiConverterString.allocationSize(value.`callGasLimit`) +
                FfiConverterString.allocationSize(value.`verificationGasLimit`) +
                FfiConverterString.allocationSize(value.`preVerificationGas`) +
                FfiConverterString.allocationSize(value.`maxFeePerGas`) +
                FfiConverterString.allocationSize(value.`maxPriorityFeePerGas`) +
                FfiConverterOptionalString.allocationSize(value.`paymaster`) +
                FfiConverterString.allocationSize(value.`paymasterVerificationGasLimit`) +
                FfiConverterString.allocationSize(value.`paymasterPostOpGasLimit`) +
                FfiConverterOptionalString.allocationSize(value.`paymasterData`) +
                FfiConverterString.allocationSize(value.`signature`) +
                FfiConverterOptionalString.allocationSize(value.`factory`) +
                FfiConverterOptionalString.allocationSize(value.`factoryData`)
        )

    override fun write(
        value: UserOperation,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`sender`, buf)
        FfiConverterString.write(value.`nonce`, buf)
        FfiConverterString.write(value.`callData`, buf)
        FfiConverterString.write(value.`callGasLimit`, buf)
        FfiConverterString.write(value.`verificationGasLimit`, buf)
        FfiConverterString.write(value.`preVerificationGas`, buf)
        FfiConverterString.write(value.`maxFeePerGas`, buf)
        FfiConverterString.write(value.`maxPriorityFeePerGas`, buf)
        FfiConverterOptionalString.write(value.`paymaster`, buf)
        FfiConverterString.write(value.`paymasterVerificationGasLimit`, buf)
        FfiConverterString.write(value.`paymasterPostOpGasLimit`, buf)
        FfiConverterOptionalString.write(value.`paymasterData`, buf)
        FfiConverterString.write(value.`signature`, buf)
        FfiConverterOptionalString.write(value.`factory`, buf)
        FfiConverterOptionalString.write(value.`factoryData`, buf)
    }
}

/**
 * Represents the environment for Bedrock operations
 */

enum class BedrockEnvironment {
    /**
     * Staging environment
     */
    STAGING,

    /**
     * Production environment
     */
    PRODUCTION,

    ;

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeBedrockEnvironment : FfiConverterRustBuffer<BedrockEnvironment> {
    override fun read(buf: ByteBuffer) =
        try {
            BedrockEnvironment.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: BedrockEnvironment) = 4UL

    override fun write(
        value: BedrockEnvironment,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

/**
 * Error type for demonstrating bedrock error handling patterns.
 *
 * The `#[bedrock_error]` macro automatically:
 * - Adds `#[derive(Debug, thiserror::Error, uniffi::Error)]` and `#[uniffi(flat_error)]`
 * - Adds a `Generic { message: String }` variant
 * - Implements `From<anyhow::Error>` for automatic conversion
 * - Provides helper methods for error handling
 */
sealed class DemoException(
    message: String,
) : kotlin.Exception(message) {
    /**
     * Authentication failed with a specific error code
     */
    class AuthenticationFailed(
        message: String,
    ) : DemoException(message)

    /**
     * Network operation timed out after specified number of seconds
     */
    class NetworkTimeout(
        message: String,
    ) : DemoException(message)

    /**
     * Invalid input was provided with a descriptive message
     */
    class InvalidInput(
        message: String,
    ) : DemoException(message)

    /**
     * A generic error that can wrap any anyhow error.
     */
    class Generic(
        message: String,
    ) : DemoException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DemoException> {
        override fun lift(error_buf: RustBuffer.ByValue): DemoException = FfiConverterTypeDemoError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeDemoError : FfiConverterRustBuffer<DemoException> {
    override fun read(buf: ByteBuffer): DemoException =
        when (buf.getInt()) {
            1 -> DemoException.AuthenticationFailed(FfiConverterString.read(buf))
            2 -> DemoException.NetworkTimeout(FfiConverterString.read(buf))
            3 -> DemoException.InvalidInput(FfiConverterString.read(buf))
            4 -> DemoException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: DemoException): ULong = 4UL

    override fun write(
        value: DemoException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is DemoException.AuthenticationFailed -> {
                buf.putInt(1)
                Unit
            }
            is DemoException.NetworkTimeout -> {
                buf.putInt(2)
                Unit
            }
            is DemoException.InvalidInput -> {
                buf.putInt(3)
                Unit
            }
            is DemoException.Generic -> {
                buf.putInt(4)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

/**
 * Enumeration of possible log levels.
 *
 * This enum represents the severity levels that can be used when logging messages.
 */

enum class LogLevel {
    /**
     * Designates very low priority, often extremely detailed messages.
     */
    TRACE,

    /**
     * Designates lower priority debugging information.
     */
    DEBUG,

    /**
     * Designates informational messages that highlight the progress of the application.
     */
    INFO,

    /**
     * Designates potentially harmful situations.
     */
    WARN,

    /**
     * Designates error events that might still allow the application to continue running.
     */
    ERROR,

    ;

    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeLogLevel : FfiConverterRustBuffer<LogLevel> {
    override fun read(buf: ByteBuffer) =
        try {
            LogLevel.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: LogLevel) = 4UL

    override fun write(
        value: LogLevel,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

/**
 * Represents primitive errors on Bedrock. These errors may not be called **from** FFI.
 */
sealed class PrimitiveException(
    message: String,
) : kotlin.Exception(message) {
    /**
     * The provided string is not validly encoded hex data.
     */
    class InvalidHexString(
        message: String,
    ) : PrimitiveException(message)

    /**
     * A provided raw input could not be parsed, is incorrectly formatted, incorrectly encoded or otherwise invalid.
     */
    class InvalidInput(
        message: String,
    ) : PrimitiveException(message)

    /**
     * A generic error that can wrap any anyhow error.
     */
    class Generic(
        message: String,
    ) : PrimitiveException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<PrimitiveException> {
        override fun lift(error_buf: RustBuffer.ByValue): PrimitiveException = FfiConverterTypePrimitiveError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypePrimitiveError : FfiConverterRustBuffer<PrimitiveException> {
    override fun read(buf: ByteBuffer): PrimitiveException =
        when (buf.getInt()) {
            1 -> PrimitiveException.InvalidHexString(FfiConverterString.read(buf))
            2 -> PrimitiveException.InvalidInput(FfiConverterString.read(buf))
            3 -> PrimitiveException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: PrimitiveException): ULong = 4UL

    override fun write(
        value: PrimitiveException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is PrimitiveException.InvalidHexString -> {
                buf.putInt(1)
                Unit
            }
            is PrimitiveException.InvalidInput -> {
                buf.putInt(2)
                Unit
            }
            is PrimitiveException.Generic -> {
                buf.putInt(3)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

/**
 * Errors that can occur when working with Safe Smart Accounts.
 */
sealed class SafeSmartAccountException(
    message: String,
) : kotlin.Exception(message) {
    /**
     * Failed to decode a hex-encoded secret key into a k256 signer.
     */
    class KeyDecoding(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * Error occurred during the signing process.
     */
    class Signing(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * Failed to parse an Ethereum address string.
     */
    class AddressParsing(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * Failed to encode data to a specific format.
     */
    class Encoding(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * A provided raw input could not be parsed, is incorrectly formatted, incorrectly encoded or otherwise invalid.
     */
    class InvalidInput(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * An error occurred with a primitive type. See `PrimitiveError` for more details.
     */
    class PrimitiveException(
        message: String,
    ) : SafeSmartAccountException(message)

    /**
     * A generic error that can wrap any anyhow error.
     */
    class Generic(
        message: String,
    ) : SafeSmartAccountException(message)

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<SafeSmartAccountException> {
        override fun lift(error_buf: RustBuffer.ByValue): SafeSmartAccountException = FfiConverterTypeSafeSmartAccountError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeSafeSmartAccountError : FfiConverterRustBuffer<SafeSmartAccountException> {
    override fun read(buf: ByteBuffer): SafeSmartAccountException =
        when (buf.getInt()) {
            1 -> SafeSmartAccountException.KeyDecoding(FfiConverterString.read(buf))
            2 -> SafeSmartAccountException.Signing(FfiConverterString.read(buf))
            3 -> SafeSmartAccountException.AddressParsing(FfiConverterString.read(buf))
            4 -> SafeSmartAccountException.Encoding(FfiConverterString.read(buf))
            5 -> SafeSmartAccountException.InvalidInput(FfiConverterString.read(buf))
            6 -> SafeSmartAccountException.PrimitiveException(FfiConverterString.read(buf))
            7 -> SafeSmartAccountException.Generic(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }

    override fun allocationSize(value: SafeSmartAccountException): ULong = 4UL

    override fun write(
        value: SafeSmartAccountException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is SafeSmartAccountException.KeyDecoding -> {
                buf.putInt(1)
                Unit
            }
            is SafeSmartAccountException.Signing -> {
                buf.putInt(2)
                Unit
            }
            is SafeSmartAccountException.AddressParsing -> {
                buf.putInt(3)
                Unit
            }
            is SafeSmartAccountException.Encoding -> {
                buf.putInt(4)
                Unit
            }
            is SafeSmartAccountException.InvalidInput -> {
                buf.putInt(5)
                Unit
            }
            is SafeSmartAccountException.PrimitiveException -> {
                buf.putInt(6)
                Unit
            }
            is SafeSmartAccountException.Generic -> {
                buf.putInt(7)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.String?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

/**
 * @suppress
 */
public object FfiConverterOptionalTypeBedrockConfig : FfiConverterRustBuffer<BedrockConfig?> {
    override fun read(buf: ByteBuffer): BedrockConfig? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeBedrockConfig.read(buf)
    }

    override fun allocationSize(value: BedrockConfig?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeBedrockConfig.allocationSize(value)
        }
    }

    override fun write(
        value: BedrockConfig?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeBedrockConfig.write(value, buf)
        }
    }
}

/**
 * Gets a reference to the global Bedrock configuration.
 *
 * # Returns
 * An Option containing a reference to the config if initialized, None otherwise.
 *
 * # Examples
 *
 * ## Swift
 *
 * ```swift
 * if let config = getConfig() {
 * print("Environment: \(config.environment())")
 * }
 * ```
 */
fun `getConfig`(): BedrockConfig? =
    FfiConverterOptionalTypeBedrockConfig.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_func_get_config(_status)
        },
    )

/**
 * Checks if the Bedrock configuration has been initialized.
 *
 * # Returns
 * true if the config has been initialized, false otherwise.
 */
fun `isInitialized`(): kotlin.Boolean =
    FfiConverterBoolean.lift(
        uniffiRustCall { _status ->
            UniffiLib.INSTANCE.uniffi_bedrock_fn_func_is_initialized(_status)
        },
    )

/**
 * Initializes the global Bedrock configuration.
 *
 * This function should be called once at application startup before any other Bedrock operations.
 * Subsequent calls will be ignored and print a warning.
 *
 * # Arguments
 * * `environment` - The environment to use for all Bedrock operations
 *
 * # Examples
 *
 * ## Swift
 *
 * ```swift
 * import Bedrock
 *
 * // In your app delegate or during app initialization
 * setConfig(environment: .staging)
 * ```
 */
fun `setConfig`(`environment`: BedrockEnvironment) =
    uniffiRustCall { _status ->
        UniffiLib.INSTANCE.uniffi_bedrock_fn_func_set_config(FfiConverterTypeBedrockEnvironment.lower(`environment`), _status)
    }

/**
 * Sets the global logger.
 *
 * This function allows you to provide your own implementation of the `Logger` trait.
 * It initializes the logging system and should be called before any logging occurs.
 *
 * # Arguments
 *
 * * `logger` - An `Arc` containing your logger implementation.
 *
 * # Panics
 *
 * Panics if the logger has already been set.
 *
 * # Note
 *
 * If the logger has already been set, this function will print a message and do nothing.
 */
fun `setLogger`(`logger`: Logger) =
    uniffiRustCall { _status ->
        UniffiLib.INSTANCE.uniffi_bedrock_fn_func_set_logger(FfiConverterTypeLogger.lower(`logger`), _status)
    }
