use super::*;

#[test]
// TODO: Create a full e2e test that calls the nitro backend to get a fresh attestation document and verify it.

// This test simulates a full attestation document with real PCR values generated by my enclave at the time.
// Since the attestation document is only valid for a few hours, we need to create a custom verifier with an extended max age to handle expired attestations for testing.
// Additionally we bypass the certificate expiration check
fn test_real_attestation_document() {
    let attestation_doc_base64 = "hEShATgioFkRO79pbW9kdWxlX2lkeCdpLTA1ZWJjMGQ5NjA3ZmM5NmE1LWVuYzAxOThlOGM2ZmZlMDM0MzlmZGlnZXN0ZlNIQTM4NGl0aW1lc3RhbXAbAAABmOygxS1kcGNyc7AAWDCZudq9Ao+xK0aiIXVVwS79ZwOqGfSOqHkI+OWyga4Higsiem9Qk8Sg+IEdpNMxcMUBWDBLTVs2YbPvwSkgkAyA4Sbkzng8Ui3mwCoqW/evOiuTJ7hndvGI5L4cHEBKEp29pJMCWDBnrYL9njRjoV/Kxt/GELJXobz/4d1VXfvY9rf2OL76IhxoAZw4V7n1ezhDJo7rD5EDWDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEWDBC5kqqz2ZyIhfaU22++SPSr5YdIgRDpXUPEthGJsL3NZJ5R8Y5OKFCuFeEsMcfnrY2VydGlmaWNhdGVZAoAwggJ8MIICAaADAgECAhABmOjG/+A0OQAAAABor0PHMAoGCCqGSM49BAMDMIGOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxOTA3BgNVBAMMMGktMDVlYmMwZDk2MDdmYzk2YTUudXMtZWFzdC0xLmF3cy5uaXRyby1lbmNsYXZlczAeFw0yNTA4MjcxNzQzMzJaFw0yNTA4MjcyMDQzMzVaMIGTMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxPjA8BgNVBAMMNWktMDVlYmMwZDk2MDdmYzk2YTUtZW5jMDE5OGU4YzZmZmUwMzQzOS51cy1lYXN0LTEuYXdzMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEA/75pHVaLa9dR7eVABq2Br/4Q7HEXBMnc2ICoUTduCQolbez2UuhSVKvTziv8NMv5rFf+2DY0+vxJ0Qi4Gv7LTBAJSi+nbKBJyCnlV0w7P4YllaGSztWullLpf37kaaHox0wGzAMBgNVHRMBAf8EAjAAMAsGA1UdDwQEAwIGwDAKBggqhkjOPQQDAwNpADBmAjEAsHrXsA25PRVPvSo1diz5j7dKtc2aRisVDQwcXlYVly8+oglMG6SjhWMwaKeQ2AIEAjEAmbXEHv6GooE6K8tQI8Y6WTpS+hlcDeWqtLaV+LROcZk8ihypIbzl3GWmQ5YNNcOTaGNhYnVuZGxlhFkCFTCCAhEwggGWoAMCAQICEQD5MXVoG5Cv4R1GzLTk5/hWMAoGCCqGSM49BAMDMEkxCzAJBgNVBAYTAlVTMQ8wDQYDVQQKDAZBbWF6b24xDDAKBgNVBAsMA0FXUzEbMBkGA1UEAwwSYXdzLm5pdHJvLWVuY2xhdmVzMB4XDTE5MTAyODEzMjgwNVoXDTQ5MTAyODE0MjgwNVowSTELMAkGA1UEBhMCVVMxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMRswGQYDVQQDDBJhd3Mubml0cm8tZW5jbGF2ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT8AlTrpgjB82hw4prakL5GODKSc26JS//2ctmJREtQUeU0pLH22+PAvFgaMrexdgcO3hLWmj/qIRtm51LPfdHdCV9vE3D0FwhD2dwQASHkz2MBKAlmRIfJeWKEME3FP/SjQjBAMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJAltQ3ZBUfnlsOW+nKdz5mp30uWMA4GA1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAwNpADBmAjEAo38vkaHJvV7nuGJ8FpjSVQOOHwND+VtjqWKMPTmAlUWhHry/LjtV2K7ucbTD1q3zAjEAovObFgWycCil3UugabUBbmW0+96P4AYdalMZf5za9dlDvGH8K+sDy2/ujSMC89/2WQLDMIICvzCCAkWgAwIBAgIRAJtc0NtN2AbrZ/hbEtuaoPMwCgYIKoZIzj0EAwMwSTELMAkGA1UEBhMCVVMxDzANBgNVBAoMBkFtYXpvbjEMMAoGA1UECwwDQVdTMRswGQYDVQQDDBJhd3Mubml0cm8tZW5jbGF2ZXMwHhcNMjUwODI0MDMwNzQ1WhcNMjUwOTEzMDQwNzQ1WjBkMQswCQYDVQQGEwJVUzEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxNjA0BgNVBAMMLTI5ODM5NDhkNWUyM2FmMWIudXMtZWFzdC0xLmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABM3JtPq8t+8Rr0LUYzNuaUn8p71B8sn9FRZbASW+rhW1KWBSwic6i8++ihNo7y9SnP52hgwOTwHG2XtHMVovwCTRoN5lUmh03ckrqVNZ7tcxMf8ZG5rRK5j1MjJqMOKoEaOB1TCB0jASBgNVHRMBAf8ECDAGAQH/AgECMB8GA1UdIwQYMBaAFJAltQ3ZBUfnlsOW+nKdz5mp30uWMB0GA1UdDgQWBBTOKPsFuh/6GkHJ+cTKzxcBKUDN4TAOBgNVHQ8BAf8EBAMCAYYwbAYDVR0fBGUwYzBhoF+gXYZbaHR0cDovL2F3cy1uaXRyby1lbmNsYXZlcy1jcmwuczMuYW1hem9uYXdzLmNvbS9jcmwvYWI0OTYwY2MtN2Q2My00MmJkLTllOWYtNTkzMzhjYjY3Zjg0LmNybDAKBggqhkjOPQQDAwNoADBlAjEAnFMxgLyfmMRS6c5W/F2SN1WHj5W2O/GyzDyP3/ruZcIguvwyzlHe2K4o+e3OSR2SAjBAopVJpdPMGaG1pelTQcyHk9VLNCGivVQgYjBkbICWe2O36WeQhaFs4tRdK4kPQb9ZAxgwggMUMIICmqADAgECAhAG3j1gz0pZOCeESefGtpf1MAoGCCqGSM49BAMDMGQxCzAJBgNVBAYTAlVTMQ8wDQYDVQQKDAZBbWF6b24xDDAKBgNVBAsMA0FXUzE2MDQGA1UEAwwtMjk4Mzk0OGQ1ZTIzYWYxYi51cy1lYXN0LTEuYXdzLm5pdHJvLWVuY2xhdmVzMB4XDTI1MDgyNzA2NDkxNloXDTI1MDkwMjA0NDkxNlowgYkxPDA6BgNVBAMMMzk3MmUwNWMzYjQxMDBlYzUuem9uYWwudXMtZWFzdC0xLmF3cy5uaXRyby1lbmNsYXZlczEMMAoGA1UECwwDQVdTMQ8wDQYDVQQKDAZBbWF6b24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTB2MBAGByqGSM49AgEGBSuBBAAiA2IABL9HEZni/lSd+c04FHNo59pIZHyhItj+nUr9B+taO++4zG/IeSwZc/sFYV/+7U6Z4kdcbYSiEbCYl0lOfhvj8u3P0EhCP+K6vdZjDyO1SyKnY1MA3hgOCDccpmRmR/SFPqOB6jCB5zASBgNVHRMBAf8ECDAGAQH/AgEBMB8GA1UdIwQYMBaAFM4o+wW6H/oaQcn5xMrPFwEpQM3hMB0GA1UdDgQWBBT5WvGYXvQxokhpA3sxUgmLqyKDCTAOBgNVHQ8BAf8EBAMCAYYwgYAGA1UdHwR5MHcwdaBzoHGGb2h0dHA6Ly9jcmwtdXMtZWFzdC0xLWF3cy1uaXRyby1lbmNsYXZlcy5zMy51cy1lYXN0LTEuYW1hem9uYXdzLmNvbS9jcmwvNGI2MGVmZDgtN2M5Ny00MTgyLThmODMtNDJiNGVkYzVmNDMxLmNybDAKBggqhkjOPQQDAwNoADBlAjEA/W9q7+tU08NoY+sKM6F3SKormLxH816CSUkwZg1CroE2sGXAZ1IJWozqPOS01nxpAjAjGjqQXT4mSBF0jMRZHSXuT+OSavbPNPMo/Pgxl9jkmXFF9tn6hbB5yWn2tTZuxM5ZAsMwggK/MIICRaADAgECAhUAjwjfnoqckYEOnDtgHuZbYwi2G/cwCgYIKoZIzj0EAwMwgYkxPDA6BgNVBAMMMzk3MmUwNWMzYjQxMDBlYzUuem9uYWwudXMtZWFzdC0xLmF3cy5uaXRyby1lbmNsYXZlczEMMAoGA1UECwwDQVdTMQ8wDQYDVQQKDAZBbWF6b24xCzAJBgNVBAYTAlVTMQswCQYDVQQIDAJXQTEQMA4GA1UEBwwHU2VhdHRsZTAeFw0yNTA4MjcxMTAzMjRaFw0yNTA4MjgxMTAzMjRaMIGOMQswCQYDVQQGEwJVUzETMBEGA1UECAwKV2FzaGluZ3RvbjEQMA4GA1UEBwwHU2VhdHRsZTEPMA0GA1UECgwGQW1hem9uMQwwCgYDVQQLDANBV1MxOTA3BgNVBAMMMGktMDVlYmMwZDk2MDdmYzk2YTUudXMtZWFzdC0xLmF3cy5uaXRyby1lbmNsYXZlczB2MBAGByqGSM49AgEGBSuBBAAiA2IABHWQdbAJhWMNtNGPNVU0F435fQbh/FKGpfxjDb1XDpvypFQTfQDgDsxFyww0YZBEgKGJbrQi64+eqPzA9qgLm+E6w4zb+PryBY2ZF6CL2ddqJMKtcJtgunfuAKsQj4rkcqNmMGQwEgYDVR0TAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAgQwHQYDVR0OBBYEFIQqyRsunxWadSOA4VqpvfEcyzAEMB8GA1UdIwQYMBaAFPla8Zhe9DGiSGkDezFSCYurIoMJMAoGCCqGSM49BAMDA2gAMGUCMQDJX6Fj5QWfFnLeotLbY4E99RkEaRq1NRK7hjiwOXqvmADoLQiDrBjhZc2uYmu0/G4CMGzZ6coAhOPPmw++++dUrVuNhVo7dv01itLnEBfCETFMolrDd8nHddMCWOfilxY56GpwdWJsaWNfa2V5WCDxiw7BQLwGHSKgO8DJvYkjMozG3img7KmX01QmVeUKBml1c2VyX2RhdGFOc29tZSB1c2VyIGRhdGFlbm9uY2VKc29tZSBub25jZf9YYOEg4wP7Fq4mGuLJdLuyGc+ximfLBnQIahmknKwu81zuEHEnyCvTc25vAoSwwzZqO8dK4im2LSjhYLytYVMnu4fNW3Smf5ln/GRyCi9SwZ9BC/npwwmgn32+vrDVwJF8hQ==";

    let attestation_doc_bytes = base64::Engine::decode(
        &base64::engine::general_purpose::STANDARD,
        attestation_doc_base64,
    )
    .expect("Failed to decode base64");

    let encoded_public_key = "8YsOwUC8Bh0ioDvAyb2JIzKMxt4poOypl9NUJlXlCgY=";

    let expected_public_key = base64::Engine::decode(
        &base64::engine::general_purpose::STANDARD,
        encoded_public_key,
    )
    .expect("Failed to decode base64");

    // Create a custom verifier with extended max age to handle expired attestations for testing
    let pcr_configs = vec![]; // We'll add them below
    let root_cert = super::constants::AWS_NITRO_ROOT_CERT_PROD.to_vec();
    let ten_years_in_milliseconds = 10 * 365 * 24 * 60 * 60 * 1000; // 10 years in milliseconds (for testing)

    let mut verifier = EnclaveAttestationVerifier::new_with_config_and_time_skip(
        pcr_configs,
        root_cert,
        ten_years_in_milliseconds,
        true, // Skip certificate time checks for testing
    );

    // These are real PCR values generated by my encalve in time
    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 0,
        expected_value: hex::decode(
            "99b9dabd028fb12b46a2217555c12efd6703aa19f48ea87908f8e5b281ae078a0b227a6f5093c4a0f8811da4d33170c5",
        )
        .unwrap(),
        description: "Staging enclave image v1.0.0-staging".to_string(),
    });
    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 1,
        expected_value: hex::decode(
            "4b4d5b3661b3efc12920900c80e126e4ce783c522de6c02a2a5bf7af3a2b9327b86776f188e4be1c1c404a129dbda493",
        )
        .unwrap(),
        description: "Staging kernel and bootstrap".to_string(),
    });

    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 2,
        expected_value: hex::decode(
            "67ad82fd9e3463a15fcac6dfc610b257a1bcffe1dd555dfbd8f6b7f638befa221c68019c3857b9f57b3843268eeb0f91",
        )
        .unwrap(),
        description: "Staging application layer".to_string(),
    });

    // Verify the attestation document
    let result = verifier.verify_attestation_document(&attestation_doc_bytes);

    match result {
        Ok(verified) => {
            println!("✅ Attestation verified successfully!");
            println!("Module ID: {}", verified.module_id);
            println!("Timestamp: {}", verified.timestamp);
            println!("PCR values found: {}", verified.pcr_values.len());

            // Print PCR values for debugging
            for (index, value) in &verified.pcr_values {
                println!("  PCR{}: {}", index, hex::encode(value));
            }

            // Uncomment when you have the expected public key
            assert_eq!(
                verified.enclave_public_key,
                hex::encode(expected_public_key),
                "Public key mismatch"
            );
        }
        Err(e) => {
            // This will help debug what's failing
            match &e {
                EnclaveAttestationError::AttestationDocumentParseError(msg) => {
                    println!("❌ Failed to parse attestation document: {}", msg);
                }
                EnclaveAttestationError::AttestationChainInvalid(msg) => {
                    println!("❌ Certificate chain validation failed: {}", msg);
                }
                EnclaveAttestationError::AttestationSignatureInvalid(msg) => {
                    println!("❌ Signature verification failed: {}", msg);
                }
                EnclaveAttestationError::CodeUntrusted { pcr_index, actual } => {
                    println!("❌ PCR{} value not trusted: {}", pcr_index, actual);
                    println!("   You need to add this PCR value to allowed configs");
                }
                EnclaveAttestationError::AttestationStale {
                    age_millis,
                    max_age,
                } => {
                    println!(
                        "❌ Attestation is too old: {}ms (max: {}ms)",
                        age_millis, max_age
                    );
                }
                _ => {
                    println!("❌ Verification failed: {:?}", e);
                }
            }
            panic!("Attestation verification failed: {:?}", e);
        }
    }
}
