use super::*;

#[test]
// TODO: Create a full e2e test that calls the nitro backend to get a fresh attestation document and verify it.

// This test simulates a full attestation document with real PCR values generated by my enclave at the time.
// Since the attestation document is only valid for a few hours, we need to create a custom verifier with an extended max age to handle expired attestations for testing.
// Additionally we bypass the certificate expiration check
fn test_real_attestation_document() {
    let attestation_doc_base64 = "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";

    let attestation_doc_bytes = base64::Engine::decode(
        &base64::engine::general_purpose::STANDARD,
        attestation_doc_base64,
    )
    .expect("Failed to decode base64");

    // let encoded_public_key = "8YsOwUC8Bh0ioDvAyb2JIzKMxt4poOypl9NUJlXlCgY=";

    // let expected_public_key = base64::Engine::decode(
    //     &base64::engine::general_purpose::STANDARD,
    //     encoded_public_key,
    // )
    // .expect("Failed to decode base64");

    // Create a custom verifier with extended max age to handle expired attestations for testing
    let pcr_configs = vec![]; // We'll add them below
    let root_cert = super::constants::AWS_NITRO_ROOT_CERT_PROD.to_vec();
    let ten_years_in_milliseconds = 10 * 365 * 24 * 60 * 60 * 1000; // 10 years in milliseconds (for testing)

    let mut verifier = EnclaveAttestationVerifier::new_with_config_and_time_skip(
        pcr_configs,
        root_cert,
        ten_years_in_milliseconds,
        false, // Skip certificate time checks for testing
    );

    // These are real PCR values generated by my encalve in time
    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 0,
        expected_value: hex::decode(
            "5b6111e5a72a5bfb60ae394baabbe1f0000046ce13f7f2f67fd69e1e212ba90fe53af95a01b9eee9e722795d06406b5d",
        )
        .unwrap(),
        description: "Staging enclave image v1.0.0-staging".to_string(),
    });
    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 1,
        expected_value: hex::decode(
            "4b4d5b3661b3efc12920900c80e126e4ce783c522de6c02a2a5bf7af3a2b9327b86776f188e4be1c1c404a129dbda493",
        )
        .unwrap(),
        description: "Staging kernel and bootstrap".to_string(),
    });

    verifier.add_allowed_pcr_config(PcrConfiguration {
        index: 2,
        expected_value: hex::decode(
            "b7c615d9cf63c766db0d7368de89c92c61a4a592ba99d36ae224ce976c9942000d06fcad3f62be739989b326771c8c70",
        )
        .unwrap(),
        description: "Staging application layer".to_string(),
    });

    // Verify the attestation document
    let result = verifier.verify_attestation_document(&attestation_doc_bytes);

    match result {
        Ok(verified) => {
            println!("✅ Attestation verified successfully!");
            println!("Module ID: {}", verified.module_id);
            println!("Timestamp: {}", verified.timestamp);
        }
        Err(e) => {
            // This will help debug what's failing
            match &e {
                EnclaveAttestationError::AttestationDocumentParseError(msg) => {
                    println!("❌ Failed to parse attestation document: {}", msg);
                }
                EnclaveAttestationError::AttestationChainInvalid(msg) => {
                    println!("❌ Certificate chain validation failed: {}", msg);
                }
                EnclaveAttestationError::AttestationSignatureInvalid(msg) => {
                    println!("❌ Signature verification failed: {}", msg);
                }
                EnclaveAttestationError::CodeUntrusted { pcr_index, actual } => {
                    println!("❌ PCR{} value not trusted: {}", pcr_index, actual);
                    println!("   You need to add this PCR value to allowed configs");
                }
                EnclaveAttestationError::AttestationStale {
                    age_millis,
                    max_age,
                } => {
                    println!(
                        "❌ Attestation is too old: {}ms (max: {}ms)",
                        age_millis, max_age
                    );
                }
                _ => {
                    println!("❌ Verification failed: {:?}", e);
                }
            }
            panic!("Attestation verification failed: {:?}", e);
        }
    }
}
